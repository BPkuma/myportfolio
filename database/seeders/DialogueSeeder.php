<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\Dialogue;
use Illuminate\Support\Facades\Facade;

class DialogueSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $user_name = Facade::getFacadeApplication()->make('auth')->user()->name ?? "ななし"; 
        
        $talks = [
            ['ジャスコ「 '.$user_name.'さま JavaScript おさらい ページへようこそ。」', null], 
            ['ジャスコ「 わたしは ジャスコ。でんせつ の'.$user_name.' さま を おまちして おりました。」', null],
            ['ジャスコ「 いっしょに JavaScript の おさらい を していきましょう！ 」', null],
            ['ジャスコ「 うえ に ある タイマーが き になりますか？」', 'q'],
            ['ジャスコ「 きょう という 1 にち が あと なんじかん なんびょう で おわるか を つげて くれる しんせい なるタイマー です。」', null],
            ['ジャスコ「 はるかむかし、1970ねん 1がつ 1にち から やすまず カウント し つづけて いる のです。」', null],
            ['ジャスコ「 '.$user_name.'さま どうか、よびの カウントダウンタイマー を つくって くださいませんか？」',  'q'],
            ['ジャスコ「 ほんとう ですか？ かんしゃ いたします。」', null],
            ['ジャスコ「 ！？」', 'slime'],
            [' なんと スライム が なかま に なりたそう に こちら を みている！', null],
            ['スライム「 オラも てつだって やっからよ。」', null],
            ['ジャスコ「 ・・・」', null],
            ['スライム「 よっしゃ がんばっぺ！」', null],
            ['ジャスコ「 で、では タイムスタンプ の しゅとく から はじめましょう。」', null],
            ['スライム「 タイムスタンプ ってなんだ？うめぇのか？」', null],
            ['ジャスコ「 タイムスタンプ とは、1970年 1月 1日 0時 0分 から 数えて 何ミリ 秒 経過 したか を 表す 数値です。」', null],
            ['スライム「 ・・・！」', null],
            ['ジャスコ「 今現在 の タイムスタンプ と、1日 の 終わり の タイムスタンプ を 求めましょう。」', null],
            ['スライム「 きゅ、きゅうに かんじが・・・」', null],
            ['ジャスコ「 まず は 現在 の 日時 を 取得 します。下 の コード を ご覧ください。」', 'code_now'],
            ['ジャスコ「 Date オブジェクト を インスタンス化 し、定数 now に 代入 します。」', null],
            ['ジャスコ「 getTime() メソッド を 使うと、タイムスタンプ が 取得 できます。」', null],
            ['スライム「 いぎなし なに しゃべってんだ この おなごは・・・」', null],
            ['ジャスコ「 console.log で 確認 すると、今 現在 の タイムスタンプ が 出力されます。」', null],
            ['ジャスコ「 次は、1日 の 終わり の タイムスタンプ を 求めましょう。」', 'code_goal'],
            ['ジャスコ「 Date オブジェクト を インスタンス化し、定数 goal に代入します。」', null],
            ['ジャスコ「 Date オブジェクト を インスタンス化し、定数 goal に代入します。」', null],
            ['ジャスコ「 setHours() メソッド は 時、setMinutes() は 分、setSeconds() は 秒 を セットすることができます。」', null],            
            ['ジャスコ「 console.log で確認すると、今日 の 終わり の 時間 が 出力 されます。」', null],
            ['スライム「 あわわわわ・・・」', null],
            ['ジャスコ「 あとは 先ほど と 同じ ように、gettime() メソッド で タイムスタンプ が 取得 できます。」', null],
            ['スライム「 タイム・・・スタ・・・」', null],
            ['ジャスコ「 次に、これらを 引き算 し、定数 diff に 代入 します。」', 'code_subtraction'],
            ['ジャスコ「 console.log で 確認 すると、今日 の 残り時間 が ミリ秒 で 確認 できます。」', null],
            ['スライム「 ひ・・・ひき・・・ざん」', null],
            ['ジャスコ「 ミリ秒 を 時、分、秒 に 直します。」', 'code_hms'],
            ['ジャスコ「 ミリ秒 を 1000 で 割り、60 で 割った 余り を Math.floor で 切り捨てると、秒 が 求められます。」', null],
            ['ジャスコ「 ミリ秒 を 1000 で 割り、60 で 割り、さらに 60 で 割った 余り を Math.floor で 切り捨てると、分 が 求められます。」', null],
            ['ジャスコ「 ミリ秒 を 1000 で 割り、60 で 割り、さらに 60 で 割り、24 で 割った 余り を Math.floor で 切り捨てると、時 が 求められます。」', null],
            ['ジャスコ「 ミリ秒 を 1000 で 割り、60 で 割り、さらに 60 で 割り、24 で 割った 数 を Math.floor で 切り捨てると、日 が 求められます。」', null],
            ['ジャスコ「 定数 sec に 秒 を 代入、定数 min に 分 を 代入、定数 hours に 時 を 代入、定数 days に 日 を 代入 します。」', null],
            ['ジャスコ「 定数 count に 配列 として 代入し、console.log で 中身 を 確認 してみましょう。」', null],
            ['スライム「 はやくち・・・」', null],
            ['ジャスコ「 本日 の 残りが、0日 と 7時間 0分 36秒 と いうことが わかりましたね！」', null],
            ['スライム「 ・・・」', null],
            ['ジャスコ「 これらの 計算 を まとめて ファンクション にします。」', 'code_countdown'],
            ["ジャスコ「 JavaScript ファイル に コード を 書くときは、'use strict' と 書いておくと 安心です。」", null],
            ["ジャスコ「 function と 書くと、ファンクション を 定義 できます。引数 には 任意 に セット した 未来 時間が 入る 予定です。」", null],
            ["ジャスコ「 Date オブジェクト を インスタンス化 し、定数 now に代入。」", null],
            ["ジャスコ「 引数に 入る 未来時間 の タイムスタンプ から 現在 の タイムスタンプ を 引き算し、結果 を 定数 diff に代入。」", null],
            ["ジャスコ「 秒、分、時、日 を 計算し、各 定数 に 代入。」", null],
            ["ジャスコ「 日、時、分、秒を 定数 count に 代入。」", null],
            ["ジャスコ「 戻り値 を 定数 count とし、メソッド は 完成です！」", null],
            ["ジャスコ「 countDown ファンクション の 引数 に 入れる 未来時間 を 設定 します。」", null],
            ["ジャスコ「 Date オブジェクト を インスタンス化 し、定数 goal に 代入。」", null],
            ["ジャスコ「 setHours() メソッド で 時間 を セット、setMinutes() メソッド で 分 を セット、setSeconds() で 秒 を セット。」", null],
            ["ジャスコ「 countDown() ファンクション を 呼び出し、引数 に 定数 goal を セット します。」", null],
            ["ジャスコ「 countDown() ファンクション の 戻り値 は 配列 でしたね。」", 'code_backquote'],
            ["ジャスコ「 先ほど 実行 した countDown(goal) を 定数 counter に 代入。」", null],
            ["ジャスコ「 counter の 1番目 から 時 を、2番目 から 分 を、3番目 から 秒 を 取り出し、テンプレートリテラル を 作ります。」", null],
            ["スライム「 テンプ・・・ラ・・・？」", null],
            ["ジャスコ「 テンプレートリテラル とは、文字列 を 表現 する 方法 の 1つ です。」", null],
            ["ジャスコ「 文字列 を 作るとき は、ダブルクォーテーション や シングルクォーテーション で 囲む ことが 多いですが、バッククォート で 囲むことで、シングルクォーテーション を 作ることが できます。」", null],
            ["ジャスコ「 \${ } 内 に 変数 を 埋め込んだり、ファンクション を 呼び出したり できるので 便利 です。」", null],
            ["ジャスコ「 バッククォート は、shift と @ で 入力 できます。」", null],
            ["ジャスコ「 ` \${ } 時間 \${ } 分 \${ } 秒 `  { } 内 に counter の 1番目、2番目、3番目 の 値を 埋め込みましょう。」", null],
            ["ジャスコ「 コンソール で 確認 すると、残り時間 が 分かりますね。」", null],
            ["スライム「 うどん・・・」", null],
            ["ジャスコ「 この データ を html ファイル に 書き換えてみましょう。」", 'code_html'],
            ["ジャスコ「 p タグ の 中 には、残り時間 という 文字列 と span タグ が 入っており、span タグには id名 timer が 付けられています。」", null],
            ["ジャスコ「 この spanタグ の場所に、先ほど コンソール で 確認した 残り時間 を 反映させれば よいわけです。 」", null],
            ["スライム「 ピー・・・タグ・・・ 」", 'code_rewrite'],
            ["ジャスコ「 下が JavaScript ファイル です。先ほど 作った テンプレートリテラル を、定数 time に代入。 」", 'code_rewrite'],
            ["ジャスコ「 document オブジェクト の、getElementById() メソッド を 使うと、html で id名 を 持つ 要素 を 丸ごと 取得 できます。 」", null],
            ["ジャスコ「 () 内 に、取得 したい id名 を シングルクォーテーション で 囲んで 書けば OK！ 」", null],
            ["ジャスコ「 textContent を 使うと、html の 要素 の コンテンツ を 書き換える ことが できます。 」", null],
            ["ジャスコ「 これで 残り 時間 を 表示 させる ことが できましたね。 」", 'sample'],
            ["ジャスコ「 ただ、今 の 状態では 更新 ボタン を 押さない と リアルタイム で 残り時間 を 知ること は できません。 」", null],
            ["スライム「 リ・・・？ 」", null],
            ["ジャスコ「 これまで 行って きた 処理 を、1秒 ごと に 繰り返し 実行 させて みましょう！ 」", 'code_recalc'],
            ["ジャスコ「 countDown() ファンクション の 呼び出し ～ html ファイル への 書き換え まで の 処理 を まとめて recalc() ファンクション に します。 」", null],
            ["ジャスコ「 setInterval() メソッド を 使うと、指定 した ミリ秒 ごと に 繰り返し 処理 を 行なうことが できます。 」", null],
            ["ジャスコ「 第1引数 に処理 したい ファンクション、第2引数 に ミリ秒 を セット。 」", null],
            ["ジャスコ「 1000 ミリ秒 を 指定すれば、1秒 ごと に 繰り返し計算 ～ 書き換え を 行なって くれます！ 」", null],
            ["ジャスコ「 完成 しました！さすが は 伝説 の ".$user_name." 様 です！ 」", 'sample2'],
            ["スライム「 ムニャ・・・グゥ・・・グゥ 」", null],
        ];

        //新しいセリフを追加
        Dialogue::addTalks($talks);        
        
    }
}
